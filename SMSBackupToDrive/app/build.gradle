plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.example.smsbackuptodrive'
    compileSdk 33

    defaultConfig {
        applicationId "com.example.smsbackuptodrive"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation("com.google.android.gms:play-services-auth:20.7.0")
    implementation("com.google.api-client:google-api-client-android:2.2.0")
    implementation("com.google.apis:google-api-services-drive:v3-rev20230822-2.0.0")
    implementation("com.google.apis:google-api-services-sheets:v4-rev20230815-2.0.0")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3")
    implementation("androidx.work:work-runtime-ktx:2.9.0")
    implementation("androidx.core:core-ktx:1.12.0")
    implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("com.google.android.material:material:1.10.0")
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

tasks.register('packageReleaseApk') {
    dependsOn assembleRelease
    doLast {
        def targetDir = new File(project.rootDir, "apks")
        if (!targetDir.exists()) {
            targetDir.mkdirs()
        }

        def sourceFile = file("build/outputs/apk/release/app-release.apk")
        if (!sourceFile.exists()) {
            throw new GradleException("Release APK not found at ${sourceFile.absolutePath}. Run assembleRelease first.")
        }

        def newName = "sms_backup_to_drive_v${android.defaultConfig.versionName}.apk"
        copy {
            from sourceFile
            into targetDir
            rename { String fileName -> newName }
        }
        println "Release APK copied to ${new File(targetDir, newName).absolutePath}"
    }
}
